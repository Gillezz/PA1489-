Project Journal
Day 1
Today marks the start of our project, and I’m feeling a mix of excitement and nerves. Initially, I struggled with how to approach the task. After a few meetings, we decided to split up the work, which eased some of the pressure. Each team member took their responsibilities seriously, and despite the early challenges, we began to see progress. That was a great feeling!

Days 3-5
I dedicated time to watching videos on Git and GitHub, along with reading articles and PowerPoints shared by our teacher on Canvas. I soon realized that what I was learning online didn’t fully align with the reality of our project. Nonetheless, this research provided a solid foundation for the work ahead.

Days 6-10
During our group meetings, we concentrated on structuring the project and clarifying our tasks. With three of us being new to programming, this was quite a challenge. Opting for HTML and Python instead of Java was a smart choice, as we had some prior experience with Python. It was fulfilling to see our efforts starting to pay off.

Days 11-15
We created our GitHub accounts and learned essential commands like git pull, git push, and git commit. Using Git Bash became an integral part of our workflow. We delved into databases and started developing a burger ordering system using HTML, including the menu and kitchen view. Although it was tough, every small achievement made it worthwhile.

Days 16-20
Working with databases proved intimidating at first. I struggled to grasp how to connect the host, user, password, and port. After dedicating time to this challenge, I began to understand the concepts more clearly. It was truly satisfying to witness our team’s development.

Days 21-27
Building the burger ordering system was both enjoyable and relatively straightforward. We created a webpage featuring three different burgers and added interactive buttons. Watching our project evolve step by step made everything clearer and more engaging.

Final Days
I tried creating a Docker container to connect to our database. It took some time to understand how everything worked, but after several attempts, I finally succeeded. Debugging within the Docker environment exposed several issues, but each challenge fueled my curiosity to learn more. Adjusting the hostname and managing passwords were some hurdles I faced. Whenever a debugging problem arose, we tackled it immediately to avoid accumulating issues later on.

Final Reflection
This course has been incredibly valuable. Although the beginning was tough—especially since I had no programming background—I’ve gained knowledge that will definitely benefit me in future projects. If we had taken this course a bit later, I believe I would have grasped the material even better. Nonetheless, I’m thankful for the experience and all the support we received throughout the course. Looking back, I recognize how much I’ve learned. While I initially struggled with many concepts, I now feel more equipped and knowledgeable. Every problem I encountered made me more curious about finding solutions.

Debugging
Since everything was functioning without issues, I decided to experiment a bit to see what would happen. I changed USER = "root" to USER = "yasir" and began debugging.

I chose to debug the config.py file. I started the debugging session in VS Code and set the configuration to "Python File." Here’s how the session unfolded:

Breakpoint hit at line 8:
Variables:

HOST = "localhost"
USER = "yasir"
PASSWORD = "password"
PORT = 3306
DATABASE = "burger"
Executing: connection = MySQLdb.connect(...)
INFO: Connection established successfully.

Breakpoint hit at line 14:
Executing: cursor = connection.cursor()
INFO: Cursor created successfully.

Breakpoint hit at line 18:
Executing: cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DATABASE}")
ERROR: Access denied for user 'yasir'@'localhost' to database 'burger'.

Debugging Session Output
Observations
Initial Value: DATABASE = "burger"


The attempt to create the database failed due to insufficient permissions.
No DATABASE_URL was generated as the database creation was unsuccessful.
Unfortunately, we couldn't access the databases, but when I changed USER back to its original value of "root," the output was as follows:

Breakpoint hit at line 8:
Variables:

HOST = "localhost"
USER = "root"
PASSWORD = "password"
PORT = 3306
DATABASE = "burger"
Executing: connection = MySQLdb.connect(...)
INFO: Connection established successfully.

Breakpoint hit at line 14:
Executing: cursor = connection.cursor()
INFO: Cursor created successfully.

Breakpoint hit at line 18:
Executing: cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DATABASE}")
INFO: Database 'burger' created successfully.

Breakpoint hit at line 20:
Executing: cursor.execute(f"USE {DATABASE}")
INFO: Switched to database 'burger'.

Breakpoint hit at line 22:
Executing: cursor.execute("CREATE TABLE IF NOT EXISTS burgers (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255), price DECIMAL(10, 2))")
INFO: Table 'burgers' created successfully.

Debugging Session Output
Observations
Initial Value: DATABASE = "burger"
The database creation succeeded with access granted for user 'root'@'localhost'.
The database URL was generated successfully.
This shows that when I reverted the user to its original value, we were able to create databases and log in without any issues.

Summary and Reflections
What went well? I successfully monitored the variables and navigated through the code step by step.
What was challenging? I found it difficult to move through all the breakpoints while grasping the overall program flow and the significance of each line.
Usefulness of Debugging: Debugging is a vital tool for identifying and resolving issues within the code.
